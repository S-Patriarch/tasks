/*
 * Copyright (C) 2024, S-Patriarch
 *
 * ЗАДАЧА
 * Написать алгоритм для определения, является ли число n счастливым.
 * 
 * Счастливое число определяется  следующим образом:
 * 1. Начинаем с любого положительного числа и заменяем его на сумму квадратов
 * его цифр.
 * 2. Повторяем процесс до тех пор, пока число не станет равным 1
 * (где оно останется), или пока оно не зациклится бесконечно, не достигая 1.
 * 3. Числа, для которых этот процесс заканчивается на 1, являются
 * счастливыми.
 *
 * Алгоритм:
 * 1. Определяем следующее число для заданного числа n. Это можно сделать,
 * используя операции деления и взятия по модулю, чтобы последовательно
 * извлекать цифры из числа, пока они не закончатся, затем возводить каждую
 * извлеченную цифру в квадрат и суммировать их. 
 * 2. Следим за цепочкой чисел и обнаруживаем, если мы вошли в цикл. 
 * Это можно сделать с помощью HashSet. Каждый раз, когда мы генерируем
 * следующее число в цепочке, мы проверяем, есть ли оно уже в нашем HashSet.
 * Если его нет в HashSetБ мы добавляем его. Если оно уже в HashSet, это
 * означает, что мы находимся в цикле и должны вернуть false.
 * 3. Используем HashSet, а не Vector, List или Array, потому что мы
 * многократно проверяем, находится ли число в нем. Проверка, находится ли
 * число в HashSet, занимает время O(1), тогда как для других структур данных 
 * это занимает время O(n).
 */

#include <cstdlib>
#include <iostream>
#include <unordered_set>

namespace mns {
  class Solution {
  public:
    int get_next(int n)
    {
      int totalSum {0};
      while (n>0) {
        int digit = n%10;
        n = n/10;
        totalSum += digit*digit;
      }
      return totalSum;
    }

    bool is_happy(int n) 
    {
      std::unordered_set<int> seen;
      while (n!=1 && seen.find(n)==seen.end()) {
        seen.insert(n);
        n = get_next(n);
      }
      return (n==1);
    }
  };
}

int main()
{
  mns::Solution s;
  int n {19};
  bool isResult = s.is_happy(n);
  std::cout << isResult << std::endl;
  std::exit(0);
}
